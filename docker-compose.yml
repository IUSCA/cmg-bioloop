version: "3"
name: bioloop
services:
  ui:
    image: node:19
    volumes:
      - ./ui/:/opt/sca/app
      - ui_modules:/opt/sca/app/node_modules
    ports:
      - 127.0.0.1:443:443
    working_dir: /opt/sca/app
    # command: sh -c "npm install && exec /opt/sca/app/node_modules/.bin/vite --host"
    # entrypoint: [ "tail", "-f", "/dev/null" ]
    entrypoint:
      - sh
      - -c
      - |
        npm install && exec /opt/sca/app/node_modules/.bin/vite --host

  api:
    image: node:19
    # user: ${APP_UID}:${APP_GID}
    # build:
      # context: ./api
      # args:
        # APP_UID: ${APP_UID} # read from .env file
        # APP_GID: ${APP_GID} # read from .env file
    # environment:
    #   - APP_UID=APP_UID
    #   - APP_GID=APP_GID
    volumes:
      - ./api/:/opt/sca/app
      - api_modules:/opt/sca/app/node_modules
    expose:
      - 3030
    ports:
      - 127.0.0.1:3030:3030
    working_dir: /opt/sca/app
    # entrypoint: ["tail", "-f", "/dev/null"]
    # command: sh -c "sleep infinity"
    entrypoint:
      - sh
      - -c
      - |
        npm install \
        && npx prisma generate client \
        && exec /opt/sca/app/node_modules/.bin/nodemon --signal SIGTERM src/index.js


    extra_hosts:
      - "host.docker.internal:host-gateway" # for connecting to services running on localhost of the host network
    depends_on:
     - postgres

  postgres:
    image: postgres:14.5
    # restart: unless-stopped
    environment:
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=app
    volumes:
      - ./db/db_postgres:/var/lib/postgresql/data
      - ./db/postgres/scripts:/docker-entrypoint-initdb.d
      - ./db/postgres/aux_scripts:/opt/sca/scripts
      - ./db/backups:/opt/sca/backups
    ports:
      - 127.0.0.1:5432:5432
    expose:
      - 5432

  nginx:
    image: nginx:1.25
    ports:
        - 8000:8000
    volumes:
        - ./nginx/src:/usr/share/nginx/html
        - ./nginx/conf:/etc/nginx/conf.d
        - ./data:/opt/sca/data
    extra_hosts:
      - "host.docker.internal:host-gateway" # for connecting to services running on localhost of the host network


  db_conversion:
    build:
      context: db_conversion
      dockerfile: Dockerfile
    volumes:
      - /Users/ripandey/dev/cmg-bioloop/db_conversion:/opt/sca/app
    working_dir: /opt/sca/app
    #    env_file: ./workers/workers/convert/.env
    environment:
      ##      - todo - read env vars from .env file instead of defaults
      - MONGO_HOST=${MONGO_HOST:-host.docker.internal}
      - MONGO_PORT=${MONGO_PORT:-27017}
      - MONGO_DB=${MONGO_DB:-cmg}
      - MONGO_AUTH_SOURCE=${MONGO_AUTH_SOURCE:-cmg}
      #      - MONGO_USERNAME=${MONGO_USERNAME:-appuser}
      #      - MONGO_PASSWORD=${MONGO_PASSWORD:-example}
      - RHYTHM_MONGO_HOST=${RHYTHM_MONGO_HOST:-host.docker.internal}
      - RHYTHM_MONGO_PORT=${RHYTHM_MONGO_PORT:-27018}
      - RHYTHM_MONGO_DB=${RHYTHM_MONGO_DB:-celery}
      - RHYTHM_MONGO_AUTH_SOURCE=${RHYTHM_MONGO_AUTH_SOURCE:-admin}
      - RHYTHM_MONGO_USERNAME=${RHYTHM_MONGO_USERNAME:-root}
      - RHYTHM_MONGO_PASSWORD=${RHYTHM_MONGO_PASSWORD:-example}
      - PG_HOST=${PG_HOST:-postgres}
      - PG_PORT=${PG_PORT:-5432}
      - PG_DATABASE=${PG_DATABASE:-app}
      - PG_USER=${PG_USER:-appuser}
      - PG_PASSWORD=${PG_PASSWORD:-example}
    ##    command: python -m workers.convert.db_conversion
    entrypoint: [ "tail", "-f", "/dev/null" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"


volumes:
  ui_modules:
    external: false

  api_modules:
    external: false
